// automatically generated by the FlatBuffers compiler, do not modify

package rpc

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type HelloClientRequest struct {
	_tab flatbuffers.Table
}

func GetRootAsHelloClientRequest(buf []byte, offset flatbuffers.UOffsetT) *HelloClientRequest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &HelloClientRequest{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *HelloClientRequest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *HelloClientRequest) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *HelloClientRequest) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func HelloClientRequestStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func HelloClientRequestAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(name), 0)
}
func HelloClientRequestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}

type HelloClientReply struct {
	_tab flatbuffers.Table
}

func GetRootAsHelloClientReply(buf []byte, offset flatbuffers.UOffsetT) *HelloClientReply {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &HelloClientReply{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *HelloClientReply) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *HelloClientReply) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *HelloClientReply) Message() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func HelloClientReplyStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func HelloClientReplyAddMessage(builder *flatbuffers.Builder, message flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(message), 0)
}
func HelloClientReplyEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
